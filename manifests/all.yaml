apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-vault-demo
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx-vault-demo
  template:
    metadata:
      labels:
        app: nginx-vault-demo
    spec:
      containers:
      - name: nginx
        image: openresty/openresty:latest
        ports:
        - containerPort: 8080
        envFrom:
        - secretRef:
            name: test-secret
        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx/
          subPath: nginx.conf
      volumes:
      - name: nginx-config
        configMap:
          name: my-nginx
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-nginx
data:
  nginx.conf: |
    events {}
    env MY_SECRET;
    http {
        server {
            listen 8080;
            location / {
                content_by_lua_block {
                    ngx.say(os.getenv("MY_SECRET"))
                }
            }
        }
    }
---
apiVersion: v1
kind: Secret
metadata:
  name: test-secret
stringData:
  MY_SECRET: "test-secret-value"
---
apiVersion: v1
kind: Service
metadata:
  name: nginx-vault-demo
spec:
  selector:
    app: nginx-vault-demo
  ports:
  - port: 8080
    targetPort: 8080
    protocol: TCP






# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: nginx-vault-demo
# spec:
#   replicas: 1
#   selector:
#     matchLabels:
#       app: nginx-vault-demo
#   template:
#     metadata:
#       labels:
#         app: nginx-vault-demo
#     spec:
#       containers:
#       - name: nginx
#         image: openresty/openresty:1.19.9.1-0-alpine
#         ports:# apiVersion: v1
# kind: ConfigMap
# metadata:
#   name: my-nginx
# data:
#   nginx.conf: |
#     events {}
    
#     http {
#         server {
#             listen 8080;
            
#             location / {
#                 default_type text/plain;
#                 return 200 $ENV{"MY_SECRET"};
#             }
#         }
#     }
#         - containerPort: 8080
#         envFrom:
#         - secretRef:
#             name: my-nginx
#         volumeMounts:
#         - name: nginx-config
#           mountPath: /etc/nginx/nginx.conf
#           subPath: nginx.conf
#       volumes:
#       - name: nginx-config
#         configMap:
#           name: my-nginx
# ---
# apiVersion: v1
# kind: ConfigMap
# metadata:
#   name: my-nginx
# data:
#   nginx.conf: |
#     events {}
    
#     http {
#         server {
#             listen 8080;
            
#             location / {
#                 default_type text/plain;
#                 return 200 $ENV{"MY_SECRET"};
#             }
#         }
#     }
# # apiVersion: v1
# # kind: ConfigMap
# # metadata:
# #   name: my-nginx
# # data:
# #   nginx.conf: |
# #     events {}
# #     env MY_SECRET;
# #     http {
# #         server {
# #             listen 8080;
# #             location / {
# #                 set_by_lua \$my_secret 'return os.getenv("MY_SECRET")';
# #                 return 200 \$my_secret;
# #             }
# #         }
# #     }
# ---
# apiVersion: v1
# kind: Service
# metadata:
#   name: nginx-vault-demo
# spec:
#   selector:
#     app: nginx-vault-demo
#   ports:
#   - port: 80
#     targetPort: 8080
#   type: ClusterIP
# ---
# apiVersion: v1
# kind: Secret
# metadata:
#   name: my-nginx
#   annotations:
#     avp.kubernetes.io/path: "secret/data/nginx"
# stringData:
#   MY_SECRET: <password>
